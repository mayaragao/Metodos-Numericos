import numpy as np


def peso(N):
    if N == 2:
        w = np.array([1.0, 1.0])
        x = np.array([-0.5773502691896257, 0.5773502691896257])
    elif N == 3:
        w = np.array(
            [0.8888888888888888, 0.5555555555555556, 0.5555555555555556])
        x = np.array([0.0, -0.7745966692414834, 0.7745966692414834])
    elif N == 4:
        w = np.array([0.6521451548625461, 0.6521451548625461,
                      0.3478548451374538, 0.3478548451374538])
        x = np.array([-0.3399810435848563, 0.3399810435848563, -
                      0.8611363115940526, 0.8611363115940526])
    elif N == 5:
        w = np.array([0.5688888888888889, 0.4786286704993665,
                      0.4786286704993665, 0.2369268850561891, 0.2369268850561891])
        x = np.array([0.0, -0.5384693101056831, 0.5384693101056831, -
                      0.9061798459386640, 0.9061798459386640])
    elif N == 6:
        w = np.array([0.3607615730481386, 0.3607615730481386, 0.4679139345726910,
                      0.4679139345726910, 0.1713244923791704, 0.1713244923791704])
        x = np.array([0.6612093864662645, -0.6612093864662645, -0.2386191860831969,
                      0.2386191860831969, -0.9324695142031521, 0.9324695142031521])
    elif N == 7:
        w = np.array([0.4179591836734694, 0.3818300505051189, 0.3818300505051189,
                      0.2797053914892766, 0.2797053914892766, 0.1294849661688697, 0.1294849661688697])
        x = np.array([0.0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945,
                      0.7415311855993945, -0.9491079123427585, 0.9491079123427585])
    elif N == 8:
        w = np.array([0.3626837833783620, 0.3626837833783620, 0.3137066458778873, 0.3137066458778873,
                      0.2223810344533745, 0.2223810344533745, 0.1012285362903763, 0.1012285362903763])
        x = np.array([-0.1834346424956498, 0.1834346424956498, -0.5255324099163290, 0.5255324099163290, -
                      0.7966664774136267, 0.7966664774136267, -0.9602898564975363, 0.9602898564975363])
    elif N == 9:
        w = np.array([0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.0812743883615744,
                      0.0812743883615744, 0.3123470770400029, 0.3123470770400029, 0.2606106964029354, 0.2606106964029354])
        x = np.array([0.0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -
                      0.3242534234038089, 0.3242534234038089, -0.6133714327005904, 0.6133714327005904])
    elif N == 10:
        w = np.array([0.2955242247147529, 0.2955242247147529, 0.2692667193099963, 0.2692667193099963, 0.2190863625159820,
                      0.2190863625159820, 0.1494513491505806, 0.1494513491505806, 0.0666713443086881, 0.0666713443086881])
        x = np.array([-0.1488743389816312, 0.1488743389816312, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244,
                      0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717])
    else:
        w = np.zeros(N)
        x = np.zeros(N)
    return w, x


def quadratura(a, b, N):
    L = b-a
    w, z = peso(N)
    x = np.zeros(N)
    soma = 0
    for i in np.arange(N):
        x[i] = 0.5*(a+b+(z[i]*L))
        soma += f(x[i])*w[i]
    soma = soma*(L/2)
    return soma


def estimativa(a, b):
    m = (b-a)/2
    M = f(m)*(b-a)
    T = (f(a) + f(b))*(b-a)/2
    S = ((b-a)/6)*(f(a) + (4*f(m)) + f(b))
    E = (T-M)/3

    M_estimado = M + E
    T_estimado = T - 2*E

    print("     Regra do ponto do meio:", round(M, 5),
          "  Estimado após erro:", round(M_estimado, 5))
    print("     Regra do Trapézio:     ", round(T, 5),
          "  Estimado após erro:", round(T_estimado, 5))
    print("     Regra de Simpson:      ", round(S, 5))


def f1(x):
    y = np.exp(-x**2)
    return y


def f(x):
    y = np.exp(-(x**2)/2)/(np.sqrt(2*np.pi))
    return y


N = int(input('''
**********************************************************************
    INTEGRAÇÃO NUMÉRICA - Quadratura de Gauss\n
    Quantos pontos deseja usar na integração?
    Escolha: '''))
if (N < 0) or (N > 10):
    N = 2

a = 0
b = 1


soma = quadratura(0, 5, N)
print("\n\n     Integral: ", round(soma, 6), "para ", N, " pontos \n")
estimativa(0, 5)
